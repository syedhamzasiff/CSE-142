class LinkedList {
        Node head ;

    public void append(int data) {
        if (head == null) {
            head = new Node(data);
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = new Node(data);
    }

    public void remove(int data) {
        if (head == null) {
            return;
        }
        if (head.data == data) {
            head = head.next;
            System.out.println("removed");
            return;
        }
        Node current = head;
        while (current.next != null) {
            if (current.next.data == data) {
                current.next = current.next.next;
                return;
            }
            current = current.next;
        }
    } //removes all the instances of that data  2.2.3

    public void printList(LinkedList list) {
        if (head == null){
            System.out.println("List is empty");
        }
        Node currNode = list.head;
        System.out.print("LinkedList: ");

        while (currNode != null) {
            System.out.print(currNode.data + " ");
            currNode = currNode.next;
        }
    } //prints the list  2.2.4
    public void add(int data, int index) {
        Node newNode = new Node(data);
        newNode.data = data;
        newNode.next = null;

        if(index < 1) {
            System.out.println("The node doesnt exist");

        } else if (index == 1) {
            newNode.next = head;
            head = newNode;

        } else {
            Node temp;
            temp = head;
            for(int i = 1; i < index-1; i++) {
                if(temp != null) {
                    temp = temp.next;
                }
            }
            if(temp != null) {
                newNode.next = temp.next;
                temp.next = newNode;
            } else {
                System.out.print("The previous node is null.");
            }
        }
    }  //adds the data to a specific index 2.2.1

    public void removeSpecific(int index){
       Node tempNode = head;
       Node temp1Node = tempNode.next;

        for (int i = 0; i < index - 2; i++) {
            tempNode = temp1Node;
            temp1Node = temp1Node.next;
        }
        tempNode.next = temp1Node.next;
    } //removes from a specific index 2.2.2

    public void storeString(String str) {
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            int asciiValue = (int) c;
            this.append(asciiValue);
        }
    } //2.3
    public String returnString(){
        String str="";
        Node current = head;
        while (current != null) {
            char c = (char) current.data;
            str += c;
            current = current.next;
        }
        return str;
    } //2.4

    public String toString() {
        String str = "";
        for (Node curr = head; curr != null; curr = curr.next) {
            str = str + curr.data + " ";
        }
        return str;
    }









}





